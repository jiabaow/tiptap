{"ast":null,"code":"import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\nconst ListItem = Node.create({\n  name: 'listItem',\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList'\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name)\n    };\n  }\n});\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML(_ref2) {\n    let {\n      HTMLAttributes\n    } = _ref2;\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => _ref3 => {\n        let {\n          state,\n          commands\n        } = _ref3;\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(_ref4 => {\n          let [, value] = _ref4;\n          return !!value;\n        });\n        if (hasStyles) {\n          return true;\n        }\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n});\nconst inputRegex = /^\\s*([-+*])\\s$/;\nconst BulletList = Node.create({\n  name: 'bulletList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML(_ref5) {\n    let {\n      HTMLAttributes\n    } = _ref5;\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleBulletList: () => _ref6 => {\n        let {\n          commands,\n          chain\n        } = _ref6;\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => {\n          return this.editor.getAttributes(TextStyle.name);\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"names":["ListItem","Node","create","name","addOptions","HTMLAttributes","bulletListTypeName","orderedListTypeName","content","defining","parseHTML","tag","renderHTML","_ref","mergeAttributes","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","Shift-Tab","liftListItem","TextStyle","Mark","getAttrs","element","hasStyles","hasAttribute","_ref2","addCommands","removeEmptyTextStyle","_ref3","state","attributes","getMarkAttributes","type","Object","entries","some","_ref4","value","unsetMark","inputRegex","BulletList","itemTypeName","keepMarks","keepAttributes","group","concat","_ref5","toggleBulletList","_ref6","chain","toggleList","updateAttributes","getAttributes","run","Mod-Shift-8","addInputRules","inputRule","wrappingInputRule","find"],"sources":["/Users/wenjiabao/tiptap/node_modules/@tiptap/extension-list-item/src/list-item.ts","/Users/wenjiabao/tiptap/node_modules/@tiptap/extension-text-style/src/text-style.ts","/Users/wenjiabao/tiptap/node_modules/@tiptap/extension-bullet-list/src/bullet-list.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  HTMLAttributes: Record<string, any>,\n  bulletListTypeName: string\n  orderedListTypeName: string\n}\n\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList',\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nimport ListItem from '../../extension-list-item/src/index.js'\nimport TextStyle from '../../extension-text-style/src/index.js'\n\nexport interface BulletListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n  keepMarks: boolean,\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => { return this.editor.getAttributes(TextStyle.name) },\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}