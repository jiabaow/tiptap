{"ast":null,"code":"import{Node,mergeAttributes,textblockTypeInputRule}from'@tiptap/core';import{ReactNodeViewRenderer}from'@tiptap/react';import MCQComponent from'./MCQComponent';const MCQ_REGEX=/\\{r [^\\n]+, echo=FALSE\\}\\nquestion\\(\"([^\"]+)\"(?:,\\s*((?:\\n?\\s*answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\))+))?\\)/;const MCQ_SHORTCUT_REGEX=/^\\?{3}\\s*$/;// ??? opens a MCQ block\nfunction parseMarkdownMCQ(match){const[fullMatch,questionText,answersBlock='']=match;const answerRegex=/answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\)/g;const answers=[];let answerMatch;while((answerMatch=answerRegex.exec(answersBlock))!==null){answers.push({text:answerMatch[1],correct:!!answerMatch[2]});}return{questionText,answers};}export const MCQ=Node.create({name:'mcq',group:'block',content:'inline*',selectable:true,addOptions(){return{HTMLAttributes:{}};},addAttributes(){return{questionText:{default:'Your question?',parseHTML:element=>element.getAttribute('data-question-text'),renderHTML:attributes=>({'data-question-text':attributes.questionText})},answers:{default:[],parseHTML:element=>JSON.parse(element.getAttribute('data-answers')||'[]'),renderHTML:attributes=>({'data-answers':JSON.stringify(attributes.answers)})},mode:{default:'edit',parseHTML:element=>element.getAttribute('data-mode'),renderHTML:attributes=>({'data-mode':attributes.mode})}};},parseHTML(){return[{tag:'div[data-type=\"mcq\"]'}];},renderHTML(_ref){let{HTMLAttributes}=_ref;return['div',mergeAttributes(this.options.HTMLAttributes,HTMLAttributes,{'data-type':'mcq'}),0];},addNodeView(){return ReactNodeViewRenderer(MCQComponent);},addCommands(){return{setMCQ:options=>_ref2=>{let{commands}=_ref2;return commands.insertContent({type:this.name,attrs:options});}};},addInputRules(){return[textblockTypeInputRule({find:MCQ_SHORTCUT_REGEX,type:this.type,getAttributes:()=>({questionText:'What number is the letter A in the English alphabet?',answers:[{text:'8',correct:false},{text:'14',correct:false},{text:'1',correct:true},{text:'23',correct:false}],mode:'edit'})}),textblockTypeInputRule({find:MCQ_REGEX,type:this.type,getAttributes:match=>parseMarkdownMCQ(match)})];}});","map":{"version":3,"names":["Node","mergeAttributes","textblockTypeInputRule","ReactNodeViewRenderer","MCQComponent","MCQ_REGEX","MCQ_SHORTCUT_REGEX","parseMarkdownMCQ","match","fullMatch","questionText","answersBlock","answerRegex","answers","answerMatch","exec","push","text","correct","MCQ","create","name","group","content","selectable","addOptions","HTMLAttributes","addAttributes","default","parseHTML","element","getAttribute","renderHTML","attributes","JSON","parse","stringify","mode","tag","_ref","options","addNodeView","addCommands","setMCQ","_ref2","commands","insertContent","type","attrs","addInputRules","find","getAttributes"],"sources":["/Users/wenjiabao/tiptap/frontend/src/MCQNode.ts"],"sourcesContent":["import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { ReactNodeViewRenderer } from '@tiptap/react';\nimport MCQComponent from './MCQComponent';\n\ninterface Answer {\n    text: string;\n    correct: boolean;\n}\n\nexport interface MCQOptions {\n    HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n    interface Commands<ReturnType> {\n        mcq: {\n            /**\n             * Set an MCQ (Multiple Choice Question)\n             */\n            setMCQ: (options: { questionText: string; answers: Answer[] }) => ReturnType;\n        }\n    }\n}\n\nconst MCQ_REGEX = /\\{r [^\\n]+, echo=FALSE\\}\\nquestion\\(\"([^\"]+)\"(?:,\\s*((?:\\n?\\s*answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\))+))?\\)/;\nconst MCQ_SHORTCUT_REGEX = /^\\?{3}\\s*$/; // ??? opens a MCQ block\n\nfunction parseMarkdownMCQ(match: RegExpMatchArray) {\n    const [fullMatch, questionText, answersBlock = ''] = match;\n    const answerRegex = /answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\)/g;\n\n    const answers: Answer[] = [];\n    let answerMatch;\n    while ((answerMatch = answerRegex.exec(answersBlock)) !== null) {\n        answers.push({ text: answerMatch[1], correct: !!answerMatch[2] });\n    }\n\n    return { questionText, answers };\n}\n\nexport const MCQ = Node.create<MCQOptions>({\n    name: 'mcq',\n\n    group: 'block',\n\n    content: 'inline*',\n\n    selectable: true,\n\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n\n    addAttributes() {\n        return {\n            questionText: {\n                default: 'Your question?',\n                parseHTML: element => element.getAttribute('data-question-text'),\n                renderHTML: attributes => ({\n                    'data-question-text': attributes.questionText,\n                }),\n            },\n            answers: {\n                default: [] as Answer[],\n                parseHTML: element => JSON.parse(element.getAttribute('data-answers') || '[]'),\n                renderHTML: attributes => ({\n                    'data-answers': JSON.stringify(attributes.answers),\n                }),\n            },\n            mode: {\n                default: 'edit',\n                parseHTML: element => element.getAttribute('data-mode'),\n                renderHTML: attributes => ({\n                    'data-mode': attributes.mode,\n                }),\n            },\n        };\n    },\n\n    parseHTML() {\n        return [{ tag: 'div[data-type=\"mcq\"]' }];\n    },\n\n    renderHTML({ HTMLAttributes }) {\n        return ['div', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, { 'data-type': 'mcq' }), 0];\n    },\n\n    addNodeView() {\n        return ReactNodeViewRenderer(MCQComponent);\n    },\n\n    addCommands() {\n        return {\n            setMCQ:\n                (options: { questionText: string; answers: Answer[] }) =>\n                    ({ commands }) => commands.insertContent({\n                        type: this.name,\n                        attrs: options,\n                    }),\n        };\n    },\n\n    addInputRules() {\n        return [\n            textblockTypeInputRule({\n                find: MCQ_SHORTCUT_REGEX,\n                type: this.type,\n                getAttributes: () => ({\n                    questionText: 'What number is the letter A in the English alphabet?',\n                    answers: [\n                        { text: '8', correct: false },\n                        { text: '14', correct: false },\n                        { text: '1', correct: true },\n                        { text: '23', correct: false },\n                    ],\n                    mode: 'edit'\n                }),\n            }),\n            textblockTypeInputRule({\n                find: MCQ_REGEX,\n                type: this.type,\n                getAttributes: match => parseMarkdownMCQ(match),\n            }),\n        ];\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}