{"ast":null,"code":"import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nconst Heading = Node.create({\n  name: 'heading',\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n  parseHTML() {\n    return this.options.levels.map(level => ({\n      tag: \"h\".concat(level),\n      attrs: {\n        level\n      }\n    }));\n  },\n  renderHTML(_ref) {\n    let {\n      node,\n      HTMLAttributes\n    } = _ref;\n    const hasLevel = this.options.levels.includes(node.attrs.level);\n    const level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [\"h\".concat(level), mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setHeading: attributes => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n        return commands.setNode(this.name, attributes);\n      },\n      toggleHeading: attributes => _ref3 => {\n        let {\n          commands\n        } = _ref3;\n        if (!this.options.levels.includes(attributes.level)) {\n          return false;\n        }\n        return commands.toggleNode(this.name, 'paragraph', attributes);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [\"Mod-Alt-\".concat(level)]: () => this.editor.commands.toggleHeading({\n          level\n        })\n      }\n    }), {});\n  },\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(\"^(#{1,\".concat(level, \"})\\\\s$\")),\n        type: this.type,\n        getAttributes: {\n          level\n        }\n      });\n    });\n  }\n});\nexport { Heading, Heading as default };","map":{"version":3,"names":["Heading","Node","create","name","addOptions","levels","HTMLAttributes","content","group","defining","addAttributes","level","default","rendered","parseHTML","options","map","tag","concat","attrs","renderHTML","_ref","node","hasLevel","includes","mergeAttributes","addCommands","setHeading","attributes","_ref2","commands","setNode","toggleHeading","_ref3","toggleNode","addKeyboardShortcuts","reduce","items","editor","addInputRules","textblockTypeInputRule","find","RegExp","type","getAttributes"],"sources":["/Users/wenjiabao/tiptap/node_modules/@tiptap/extension-heading/src/heading.ts"],"sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\n\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  levels: Level[],\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType,\n      /**\n       * Toggle a heading node\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType,\n    }\n  }\n}\n\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels\n      .map((level: Level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n      }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel\n      ? node.attrs.level\n      : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.setNode(this.name, attributes)\n      },\n      toggleHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n      },\n    }), {})\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}