{"ast":null,"code":"import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { ReactNodeViewRenderer } from '@tiptap/react';\nimport MCQComponent from './MCQComponent';\nconst MCQ_REGEX = /\\{r [^\\n]+, echo=FALSE\\}\\nquestion\\(\"([^\"]+)\"(?:,\\s*((?:\\n?\\s*answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\))+))?\\)/;\nconst MCQ_SHORTCUT_REGEX = /^\\?{3}\\s*$/; // ??? opens a MCQ block\n\nfunction parseMarkdownMCQ(match) {\n  const [fullMatch, questionText, answersBlock = ''] = match;\n  const answerRegex = /answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\)/g;\n  const answers = [];\n  let answerMatch;\n  while ((answerMatch = answerRegex.exec(answersBlock)) !== null) {\n    answers.push({\n      text: answerMatch[1],\n      correct: !!answerMatch[2]\n    });\n  }\n  return {\n    questionText,\n    answers\n  };\n}\nexport const MCQ = Node.create({\n  name: 'mcq',\n  group: 'block',\n  content: 'inline*',\n  selectable: true,\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  addAttributes() {\n    return {\n      questionText: {\n        default: 'Your question?',\n        parseHTML: element => element.getAttribute('data-question-text'),\n        renderHTML: attributes => ({\n          'data-question-text': attributes.questionText\n        })\n      },\n      answers: {\n        default: [],\n        parseHTML: element => JSON.parse(element.getAttribute('data-answers') || '[]'),\n        renderHTML: attributes => ({\n          'data-answers': JSON.stringify(attributes.answers)\n        })\n      },\n      mode: {\n        default: 'edit',\n        parseHTML: element => element.getAttribute('data-mode'),\n        renderHTML: attributes => ({\n          'data-mode': attributes.mode\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'div[data-type=\"mcq\"]'\n    }];\n  },\n  renderHTML(_ref) {\n    let {\n      HTMLAttributes\n    } = _ref;\n    return ['div', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, {\n      'data-type': 'mcq'\n    }), 0];\n  },\n  addNodeView() {\n    return ReactNodeViewRenderer(MCQComponent);\n  },\n  addCommands() {\n    return {\n      setMCQ: options => _ref2 => {\n        let {\n          commands\n        } = _ref2;\n        return commands.insertContent({\n          type: this.name,\n          attrs: options\n        });\n      }\n    };\n  },\n  addInputRules() {\n    return [textblockTypeInputRule({\n      find: MCQ_SHORTCUT_REGEX,\n      type: this.type,\n      getAttributes: () => ({\n        questionText: 'What number is the letter A in the English alphabet?',\n        answers: [{\n          text: '8',\n          correct: false\n        }, {\n          text: '14',\n          correct: false\n        }, {\n          text: '1',\n          correct: true\n        }, {\n          text: '23',\n          correct: false\n        }],\n        mode: 'edit'\n      })\n    }), textblockTypeInputRule({\n      find: MCQ_REGEX,\n      type: this.type,\n      getAttributes: match => parseMarkdownMCQ(match)\n    })];\n  }\n});","map":{"version":3,"names":["Node","mergeAttributes","textblockTypeInputRule","ReactNodeViewRenderer","MCQComponent","MCQ_REGEX","MCQ_SHORTCUT_REGEX","parseMarkdownMCQ","match","fullMatch","questionText","answersBlock","answerRegex","answers","answerMatch","exec","push","text","correct","MCQ","create","name","group","content","selectable","addOptions","HTMLAttributes","addAttributes","default","parseHTML","element","getAttribute","renderHTML","attributes","JSON","parse","stringify","mode","tag","_ref","options","addNodeView","addCommands","setMCQ","_ref2","commands","insertContent","type","attrs","addInputRules","find","getAttributes"],"sources":["/Users/wenjiabao/tiptap/frontend/src/MCQNode.ts"],"sourcesContent":["import { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { ReactNodeViewRenderer } from '@tiptap/react';\nimport MCQComponent from './MCQComponent';\n\ninterface Answer {\n    text: string;\n    correct: boolean;\n}\n\nexport interface MCQOptions {\n    HTMLAttributes: Record<string, any>;\n}\n\ndeclare module '@tiptap/core' {\n    interface Commands<ReturnType> {\n        mcq: {\n            /**\n             * Set an MCQ (Multiple Choice Question)\n             */\n            setMCQ: (options: { questionText: string; answers: Answer[] }) => ReturnType;\n        }\n    }\n}\n\nconst MCQ_REGEX = /\\{r [^\\n]+, echo=FALSE\\}\\nquestion\\(\"([^\"]+)\"(?:,\\s*((?:\\n?\\s*answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\))+))?\\)/;\nconst MCQ_SHORTCUT_REGEX = /^\\?{3}\\s*$/; // ??? opens a MCQ block\n\nfunction parseMarkdownMCQ(match: RegExpMatchArray) {\n    const [fullMatch, questionText, answersBlock = ''] = match;\n    const answerRegex = /answer\\(\"([^\"]+)\"(?:,\\s*correct\\s*=\\s*TRUE)?\\)/g;\n\n    const answers: Answer[] = [];\n    let answerMatch;\n    while ((answerMatch = answerRegex.exec(answersBlock)) !== null) {\n        answers.push({ text: answerMatch[1], correct: !!answerMatch[2] });\n    }\n\n    return { questionText, answers };\n}\n\nexport const MCQ = Node.create<MCQOptions>({\n    name: 'mcq',\n\n    group: 'block',\n\n    content: 'inline*',\n\n    selectable: true,\n\n    addOptions() {\n        return {\n            HTMLAttributes: {},\n        };\n    },\n\n    addAttributes() {\n        return {\n            questionText: {\n                default: 'Your question?',\n                parseHTML: element => element.getAttribute('data-question-text'),\n                renderHTML: attributes => ({\n                    'data-question-text': attributes.questionText,\n                }),\n            },\n            answers: {\n                default: [] as Answer[],\n                parseHTML: element => JSON.parse(element.getAttribute('data-answers') || '[]'),\n                renderHTML: attributes => ({\n                    'data-answers': JSON.stringify(attributes.answers),\n                }),\n            },\n            mode: {\n                default: 'edit',\n                parseHTML: element => element.getAttribute('data-mode'),\n                renderHTML: attributes => ({\n                    'data-mode': attributes.mode,\n                }),\n            },\n        };\n    },\n\n    parseHTML() {\n        return [{ tag: 'div[data-type=\"mcq\"]' }];\n    },\n\n    renderHTML({ HTMLAttributes }) {\n        return ['div', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, { 'data-type': 'mcq' }), 0];\n    },\n\n    addNodeView() {\n        return ReactNodeViewRenderer(MCQComponent);\n    },\n\n    addCommands() {\n        return {\n            setMCQ:\n                (options: { questionText: string; answers: Answer[] }) =>\n                    ({ commands }) => commands.insertContent({\n                        type: this.name,\n                        attrs: options,\n                    }),\n        };\n    },\n\n    addInputRules() {\n        return [\n            textblockTypeInputRule({\n                find: MCQ_SHORTCUT_REGEX,\n                type: this.type,\n                getAttributes: () => ({\n                    questionText: 'What number is the letter A in the English alphabet?',\n                    answers: [\n                        { text: '8', correct: false },\n                        { text: '14', correct: false },\n                        { text: '1', correct: true },\n                        { text: '23', correct: false },\n                    ],\n                    mode: 'edit'\n                }),\n            }),\n            textblockTypeInputRule({\n                find: MCQ_REGEX,\n                type: this.type,\n                getAttributes: match => parseMarkdownMCQ(match),\n            }),\n        ];\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}